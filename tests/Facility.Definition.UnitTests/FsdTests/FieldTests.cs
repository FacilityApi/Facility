using System.Linq;
using NUnit.Framework;
using Shouldly;

namespace Facility.Definition.UnitTests.FsdTests
{
	public sealed class FieldTests
	{
		[TestCase("string", ServiceTypeKind.String)]
		[TestCase("boolean", ServiceTypeKind.Boolean)]
		[TestCase("double", ServiceTypeKind.Double)]
		[TestCase("int32", ServiceTypeKind.Int32)]
		[TestCase("int64", ServiceTypeKind.Int64)]
		[TestCase("bytes", ServiceTypeKind.Bytes)]
		[TestCase("object", ServiceTypeKind.Object)]
		[TestCase("error", ServiceTypeKind.Error)]
		public void PrimitiveFields(string name, ServiceTypeKind kind)
		{
			var service = TestUtility.ParseTestApi("service TestApi { data One { x: xyzzy; } }".Replace("xyzzy", name));

			var dto = service.Dtos.Single();
			var field = dto.Fields.Single();
			field.Name.ShouldBe("x");
			field.Attributes.Count.ShouldBe(0);
			field.Summary.ShouldBe("");
			var type = service.GetFieldType(field);
			type.Kind.ShouldBe(kind);
			type.Dto.ShouldBeNull();
			type.Enum.ShouldBeNull();
			type.ValueType.ShouldBeNull();

			TestUtility.GenerateFsd(service).ShouldBe(new[]
			{
				"// DO NOT EDIT: generated by TestUtility",
				"",
				"service TestApi",
				"{",
				"\tdata One",
				"\t{",
				$"\t\tx: {name};",
				"\t}",
				"}",
				"",
			});
		}

		[Test]
		public void CaseSensitivePrimitive()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { x: Boolean; } }");
		}

		[Test]
		public void EnumField()
		{
			var service = TestUtility.ParseTestApi("service TestApi { enum MyEnum { X } data One { x: MyEnum; } }");

			var dto = service.Dtos.Single();
			var field = dto.Fields.Single();
			field.Name.ShouldBe("x");
			field.Attributes.Count.ShouldBe(0);
			field.Summary.ShouldBe("");
			var type = service.GetFieldType(field);
			type.Kind.ShouldBe(ServiceTypeKind.Enum);
			type.Dto.ShouldBeNull();
			type.Enum.Name.ShouldBe("MyEnum");
			type.ValueType.ShouldBeNull();

			TestUtility.GenerateFsd(service).ShouldBe(new[]
			{
				"// DO NOT EDIT: generated by TestUtility",
				"",
				"service TestApi",
				"{",
				"\tenum MyEnum",
				"\t{",
				"\t\tX,",
				"\t}",
				"",
				"\tdata One",
				"\t{",
				"\t\tx: MyEnum;",
				"\t}",
				"}",
				"",
			});
		}

		[Test]
		public void DtoField()
		{
			var service = TestUtility.ParseTestApi("service TestApi { data MyDto { x: int32; } data One { x: MyDto; } }");

			var dto = service.Dtos.First(x => x.Name == "One");
			var field = dto.Fields.Single();
			field.Name.ShouldBe("x");
			field.Attributes.Count.ShouldBe(0);
			field.Summary.ShouldBe("");
			var type = service.GetFieldType(field);
			type.Kind.ShouldBe(ServiceTypeKind.Dto);
			type.Dto.Name.ShouldBe("MyDto");
			type.Enum.ShouldBeNull();
			type.ValueType.ShouldBeNull();

			TestUtility.GenerateFsd(service).ShouldBe(new[]
			{
				"// DO NOT EDIT: generated by TestUtility",
				"",
				"service TestApi",
				"{",
				"\tdata MyDto",
				"\t{",
				"\t\tx: int32;",
				"\t}",
				"",
				"\tdata One",
				"\t{",
				"\t\tx: MyDto;",
				"\t}",
				"}",
				"",
			});
		}

		[Test]
		public void RecursiveDtoField()
		{
			var service = TestUtility.ParseTestApi("service TestApi { data MyDto { x: MyDto; } }");

			var dto = service.Dtos.Single();
			var field = dto.Fields.Single();
			field.Name.ShouldBe("x");
			field.Attributes.Count.ShouldBe(0);
			field.Summary.ShouldBe("");
			var type = service.GetFieldType(field);
			type.Kind.ShouldBe(ServiceTypeKind.Dto);
			type.Dto.Name.ShouldBe("MyDto");
			type.Enum.ShouldBeNull();
			type.ValueType.ShouldBeNull();

			TestUtility.GenerateFsd(service).ShouldBe(new[]
			{
				"// DO NOT EDIT: generated by TestUtility",
				"",
				"service TestApi",
				"{",
				"\tdata MyDto",
				"\t{",
				"\t\tx: MyDto;",
				"\t}",
				"}",
				"",
			});
		}

		[Test]
		public void TwoFieldsSameName()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { X: int32; X: int64;} }")
				.Message.ShouldBe("TestApi.fsd(1,40): Duplicate field: X");
		}

		[Test]
		public void InvalidFieldType()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { X: x; } }")
				.Message.ShouldBe("TestApi.fsd(1,30): Unknown field type 'x'.");
		}

		[Test]
		public void ResultOfArrayInvalid()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { X: result<int32[]>; } }");
		}

		[Test]
		public void ResultOfResultInvalid()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { X: result<result<int32>>; } }");
		}

		[Test]
		public void ArrayOfArrayInvalid()
		{
			TestUtility.ParseInvalidTestApi("service TestApi { data One { X: int32[][]; } }");
		}
	}
}
