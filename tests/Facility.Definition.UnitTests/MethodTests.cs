using System.Linq;
using FluentAssertions;
using NUnit.Framework;

namespace Facility.Definition.UnitTests
{
	public sealed class MethodTests
	{
		[Test]
		public void InvalidName()
		{
			new ServiceMethodInfo(name: "4u").IsValid.Should().BeFalse();
		}

		[TestCase(true), TestCase(false)]
		public void DuplicateField(bool isRequest)
		{
			var fields = new[]
			{
				new ServiceFieldInfo("why", "int32"),
				new ServiceFieldInfo("Why", "int32"),
			};
			new ServiceMethodInfo(name: "x", requestFields: isRequest ? fields : null, responseFields: isRequest ? null : fields).IsValid.Should().BeFalse();
		}

		[Test]
		public void OneMinimalMethod()
		{
			var service = TestUtility.ParseTestApi("service TestApi { method do {}: {} }");

			var method = service.Methods.Single();
			method.Name.Should().Be("do");
			method.Attributes.Count.Should().Be(0);
			method.Summary.Should().Be("");
			method.Remarks.Count.Should().Be(0);
			method.RequestFields.Count.Should().Be(0);
			method.ResponseFields.Count.Should().Be(0);

			TestUtility.GenerateFsd(service).Should().Equal(
				"// DO NOT EDIT: generated by TestUtility",
				"",
				"service TestApi",
				"{",
				"\tmethod do",
				"\t{",
				"\t}:",
				"\t{",
				"\t}",
				"}",
				"");
		}
	}
}
