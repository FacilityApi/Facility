// DO NOT EDIT: generated by fsdgenfsd

/// Uber API
[info(version: 1.0.0)]
[http(url: "https://api.uber.com/v1")]
service UberApi
{
	/// Product Types
	[http(method: GET, path: "/products")]
	method getProducts
	{
		/// Latitude component of location.
		latitude: double;

		/// Longitude component of location.
		longitude: double;
	}:
	{
		/// An array of products
		[http(from: body, code: 200)]
		ok: Product[];
	}

	/// Price Estimates
	[http(method: GET, path: "/estimates/price")]
	method getEstimatesPrice
	{
		/// Latitude component of start location.
		start_latitude: double;

		/// Longitude component of start location.
		start_longitude: double;

		/// Latitude component of end location.
		end_latitude: double;

		/// Longitude component of end location.
		end_longitude: double;
	}:
	{
		/// An array of price estimates by product
		[http(from: body, code: 200)]
		ok: PriceEstimate[];
	}

	/// Time Estimates
	[http(method: GET, path: "/estimates/time")]
	method getEstimatesTime
	{
		/// Latitude component of start location.
		start_latitude: double;

		/// Longitude component of start location.
		start_longitude: double;

		/// Unique customer identifier to be used for experience customization.
		customer_uuid: string;

		/// Unique identifier representing a specific product for a given latitude & longitude.
		product_id: string;
	}:
	{
		/// An array of products
		[http(from: body, code: 200)]
		ok: Product[];
	}

	/// User Profile
	[http(method: GET, path: "/me")]
	method getMe
	{
	}:
	{
		/// Profile information for a user
		[http(from: body, code: 200)]
		profile: Profile;
	}

	/// User Activity
	[http(method: GET, path: "/history")]
	method getHistory
	{
		/// Offset the list of returned results by this amount. Default is zero.
		offset: int32;

		/// Number of items to retrieve. Default is 5, maximum is 100.
		limit: int32;
	}:
	{
		/// History information for the given user
		[http(from: body, code: 200)]
		activities: Activities;
	}

	data Product
	{
		/// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
		product_id: string;

		/// Description of product.
		description: string;

		/// Display name of product.
		display_name: string;

		/// Capacity of product. For example, 4 people.
		capacity: string;

		/// Image URL representing the product.
		image: string;
	}

	data PriceEstimate
	{
		/// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
		product_id: string;

		/// [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
		currency_code: string;

		/// Display name of product.
		display_name: string;

		/// Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
		estimate: string;

		/// Lower bound of the estimated price.
		low_estimate: double;

		/// Upper bound of the estimated price.
		high_estimate: double;

		/// Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
		surge_multiplier: double;
	}

	data Profile
	{
		/// First name of the Uber user.
		first_name: string;

		/// Last name of the Uber user.
		last_name: string;

		/// Email address of the Uber user
		email: string;

		/// Image URL of the Uber user.
		picture: string;

		/// Promo code of the Uber user.
		promo_code: string;
	}

	data Activity
	{
		/// Unique identifier for the activity
		uuid: string;
	}

	data Activities
	{
		/// Position in pagination.
		offset: int32;

		/// Number of items to retrieve (100 max).
		limit: int32;

		/// Total number of items available.
		count: int32;

		history: Activity[];
	}

	data Error
	{
		code: int32;

		message: string;

		fields: string;
	}
}

# UberApi

Move your app forward with the Uber API

# getProducts

The Products endpoint returns information about the *Uber* products
offered at a given location. The response includes the display name
and other details about each product, and lists the products in the
proper display order.


# getEstimatesPrice

The Price Estimates endpoint returns an estimated price range
for each product offered at a given location. The price estimate is
provided as a formatted string with the full price range and the localized
currency symbol.<br><br>The response also includes low and high estimates,
and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for
situations requiring currency conversion. When surge is active for a particular
product, its surge_multiplier will be greater than 1, but the price estimate
already factors in this multiplier.


# getEstimatesTime

The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.

# getMe

The User Profile endpoint returns information about the Uber user that has authorized with the application.

# getHistory

The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.
