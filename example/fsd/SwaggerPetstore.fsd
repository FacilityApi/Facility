// DO NOT EDIT: generated by fsdgenfsd

/// Swagger Petstore
[info(version: 1.0.0)]
[http(url: "http://petstore.swagger.io/v2")]
service SwaggerPetstore
{
	/// Add a new pet to the store
	[http(method: POST, path: "/pets")]
	method addPet
	{
		/// Pet object that needs to be added to the store
		[http(from: body)]
		body: Pet;
	}:
	{
	}

	/// Update an existing pet
	[http(method: PUT, path: "/pets")]
	method updatePet
	{
		/// Pet object that needs to be added to the store
		[http(from: body)]
		body: Pet;
	}:
	{
	}

	/// Finds Pets by status
	[http(method: GET, path: "/pets/findByStatus")]
	method findPetsByStatus
	{
		/// Status values that need to be considered for filter
		status: string;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		ok: Pet[];
	}

	/// Finds Pets by tags
	[http(method: GET, path: "/pets/findByTags")]
	method findPetsByTags
	{
		/// Tags to filter by
		tags: string;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		ok: Pet[];
	}

	/// Find pet by ID
	[http(method: GET, path: "/pets/{petId}")]
	method getPetById
	{
		/// ID of pet that needs to be fetched
		petId: int64;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		pet: Pet;
	}

	/// Updates a pet in the store with form data
	[http(method: POST, path: "/pets/{petId}")]
	method updatePetWithForm
	{
		/// ID of pet that needs to be updated
		petId: string;
	}:
	{
	}

	/// Deletes a pet
	[http(method: DELETE, path: "/pets/{petId}")]
	method deletePet
	{
		[http(from: header, name: api_key)]
		api_key: string;

		/// Pet id to delete
		petId: int64;
	}:
	{
	}

	/// Place an order for a pet
	[http(method: POST, path: "/stores/order")]
	method placeOrder
	{
		/// order placed for purchasing the pet
		[http(from: body)]
		body: Order;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		order: Order;
	}

	/// Find purchase order by ID
	[http(method: GET, path: "/stores/order/{orderId}")]
	method getOrderById
	{
		/// ID of pet that needs to be fetched
		orderId: string;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		order: Order;
	}

	/// Delete purchase order by ID
	[http(method: DELETE, path: "/stores/order/{orderId}")]
	method deleteOrder
	{
		/// ID of the order that needs to be deleted
		orderId: string;
	}:
	{
	}

	/// Create user
	[http(method: POST, path: "/users")]
	method createUser
	{
		/// Created user object
		[http(from: body)]
		body: User;
	}:
	{
	}

	/// Creates list of users with given input array
	[http(method: POST, path: "/users/createWithArray")]
	method createUsersWithArrayInput
	{
		/// List of user object
		[http(from: body)]
		body: User[];
	}:
	{
	}

	/// Creates list of users with given input array
	[http(method: POST, path: "/users/createWithList")]
	method createUsersWithListInput
	{
		/// List of user object
		[http(from: body)]
		body: User[];
	}:
	{
	}

	/// Logs user into the system
	[http(method: GET, path: "/users/login")]
	method loginUser
	{
		/// The user name for login
		username: string;

		/// The password for login in clear text
		password: string;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		ok: boolean;
	}

	/// Logs out current logged in user session
	[http(method: GET, path: "/users/logout")]
	method logoutUser
	{
	}:
	{
	}

	/// Get user by user name
	[http(method: GET, path: "/users/{username}")]
	method getUserByName
	{
		/// The name that needs to be fetched. Use user1 for testing.
		username: string;
	}:
	{
		/// successful operation
		[http(from: body, code: 200)]
		user: User;
	}

	/// Updated user
	[http(method: PUT, path: "/users/{username}")]
	method updateUser
	{
		/// name that need to be deleted
		username: string;

		/// Updated user object
		[http(from: body)]
		body: User;
	}:
	{
	}

	/// Delete user
	[http(method: DELETE, path: "/users/{username}")]
	method deleteUser
	{
		/// The name that needs to be deleted
		username: string;
	}:
	{
	}

	data User
	{
		id: int64;

		username: string;

		firstName: string;

		lastName: string;

		email: string;

		password: string;

		phone: string;

		/// User Status
		userStatus: int32;
	}

	data Category
	{
		id: int64;

		name: string;
	}

	data Pet
	{
		id: int64;

		category: Category;

		name: string;

		photoUrls: string[];

		tags: Tag[];

		/// pet status in the store
		status: string;
	}

	data Tag
	{
		id: int64;

		name: string;
	}

	data Order
	{
		id: int64;

		petId: int64;

		quantity: int32;

		shipDate: string;

		/// Order Status
		status: string;

		complete: boolean;
	}
}

# SwaggerPetstore

This is a sample server Petstore server.

[Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.

For this sample, you can use the api key `special-key` to test the authorization filters


# findPetsByStatus

Multiple status values can be provided with comma seperated strings

# findPetsByTags

Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.

# getPetById

Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions

# getOrderById

For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions

# deleteOrder

For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors

# createUser

This can only be done by the logged in user.

# updateUser

This can only be done by the logged in user.

# deleteUser

This can only be done by the logged in user.
