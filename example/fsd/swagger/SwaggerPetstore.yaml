swagger: '2.0'
info:
  title: Swagger Petstore
  description: |-
    This is a sample server Petstore server.

    [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger` on irc.freenode.net.

    For this sample, you can use the api key `special-key` to test the authorization filters
  version: 1.0.0
  x-identifier: SwaggerPetstore
  x-codegen: 'DO NOT EDIT: generated by fsdgenfsd'
host: petstore.swagger.io
basePath: /v2
schemes:
- http
paths:
  /pets:
    post:
      summary: Add a new pet to the store
      operationId: addPet
      consumes:
      - application/json
      parameters:
      - in: body
        name: request
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        '200':
          description: ''
    put:
      summary: Update an existing pet
      operationId: updatePet
      consumes:
      - application/json
      parameters:
      - in: body
        name: request
        description: Pet object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Pet'
      responses:
        '200':
          description: ''
  /pets/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPetsByStatus
      produces:
      - application/json
      parameters:
      - in: query
        name: status
        description: Status values that need to be considered for filter
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          x-identifier: ok
  /pets/findByTags:
    get:
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      produces:
      - application/json
      parameters:
      - in: query
        name: tags
        description: Tags to filter by
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          x-identifier: ok
  /pets/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
      operationId: getPetById
      produces:
      - application/json
      parameters:
      - in: path
        name: petId
        description: ID of pet that needs to be fetched
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
          x-identifier: pet
    post:
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - in: path
        name: petId
        description: ID of pet that needs to be updated
        required: true
        type: string
      responses:
        '200':
          description: ''
    delete:
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - in: path
        name: petId
        description: Pet id to delete
        required: true
        type: integer
        format: int64
      - in: header
        name: api_key
        type: string
      responses:
        '200':
          description: ''
  /stores/order:
    post:
      summary: Place an order for a pet
      operationId: placeOrder
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: request
        description: order placed for purchasing the pet
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
          x-identifier: order
  /stores/order/{orderId}:
    get:
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getOrderById
      produces:
      - application/json
      parameters:
      - in: path
        name: orderId
        description: ID of pet that needs to be fetched
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
          x-identifier: order
    delete:
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - in: path
        name: orderId
        description: ID of the order that needs to be deleted
        required: true
        type: string
      responses:
        '200':
          description: ''
  /users:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      consumes:
      - application/json
      parameters:
      - in: body
        name: request
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
  /users/createWithArray:
    post:
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      consumes:
      - application/json
      parameters:
      - in: body
        name: request
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
  /users/createWithList:
    post:
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      consumes:
      - application/json
      parameters:
      - in: body
        name: request
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
  /users/login:
    get:
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - in: query
        name: username
        description: The user name for login
        type: string
      - in: query
        name: password
        description: The password for login in clear text
        type: string
      responses:
        '200':
          description: successful operation
          x-identifier: ok
  /users/logout:
    get:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        '200':
          description: ''
  /users/{username}:
    get:
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      parameters:
      - in: path
        name: username
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
          x-identifier: user
    put:
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      consumes:
      - application/json
      parameters:
      - in: path
        name: username
        description: name that need to be deleted
        required: true
        type: string
      - in: body
        name: request
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: ''
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - in: path
        name: username
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        '200':
          description: ''
definitions:
  Pet:
    type: object
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
      photoUrls:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      status:
        description: pet status in the store
        type: string
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
      status:
        description: Order Status
        type: string
      complete:
        type: boolean
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        description: User Status
        type: integer
        format: int32
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
