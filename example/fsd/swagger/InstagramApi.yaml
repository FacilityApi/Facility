swagger: '2.0'
info:
  title: Instagram API
  description: |-
    The first version of the Instagram API is an exciting step forward towards
    making it easier for users to have open access to their data. We created it
    so that you can surface the amazing content Instagram users share every
    second, in fun and innovative ways.

    Build something great!

    Once you've
    [registered your client](http://instagram.com/developer/register/) it's easy
    to start requesting data from Instagram.

    All endpoints are only accessible via https and are located at
    `api.instagram.com`. For instance: you can grab the most popular photos at
    the moment by accessing the following URL with your client ID
    (replace CLIENT-ID with your own):
    ```
      https://api.instagram.com/v1/media/popular?client_id=CLIENT-ID
    ```
    You're best off using an access_token for the authenticated user for each
    endpoint, though many endpoints don't require it.
    In some cases an access_token will give you more access to information, and
    in all cases, it means that you are operating under a per-access_token limit
    vs. the same limit for your single client_id.


    ## Limits
    Be nice. If you're sending too many requests too quickly, we'll send back a
    `503` error code (server unavailable).
    You are limited to 5000 requests per hour per `access_token` or `client_id`
    overall. Practically, this means you should (when possible) authenticate
    users so that limits are well outside the reach of a given user.

    ## Deleting Objects
    We do our best to have all our URLs be
    [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).
    Every endpoint (URL) may support one of four different http verbs. GET
    requests fetch information about an object, POST requests create objects,
    PUT requests update objects, and finally DELETE requests will delete
    objects.

    Since many old browsers don't support PUT or DELETE, we've made it easy to
    fake PUTs and DELETEs. All you have to do is do a POST with _method=PUT or
    _method=DELETE as a parameter and we will treat it as if you used PUT or
    DELETE respectively.

    ## Structure

    ### The Envelope
    Every response is contained by an envelope. That is, each response has a
    predictable set of keys with which you can expect to interact:
    ```json
    {
        "meta": {
            "code": 200
        },
        "data": {
            ...
        },
        "pagination": {
            "next_url": "...",
            "next_max_id": "13872296"
        }
    }
    ```

    #### META
    The meta key is used to communicate extra information about the response to
    the developer. If all goes well, you'll only ever see a code key with value
    200. However, sometimes things go wrong, and in that case you might see a
    response like:
    ```json
    {
        "meta": {
            "error_type": "OAuthException",
            "code": 400,
            "error_message": "..."
        }
    }
    ```

    #### DATA
    The data key is the meat of the response. It may be a list or dictionary,
    but either way this is where you'll find the data you requested.
    #### PAGINATION
    Sometimes you just can't get enough. For this reason, we've provided a
    convenient way to access more data in any request for sequential data.
    Simply call the url in the next_url parameter and we'll respond with the
    next set of data.
    ```json
    {
        ...
        "pagination": {
            "next_url": "https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296",
            "next_max_id": "13872296"
        }
    }
    ```
    On views where pagination is present, we also support the "count" parameter.
    Simply set this to the number of items you'd like to receive. Note that the
    default values should be fine for most applications - but if you decide to
    increase this number there is a maximum value defined on each endpoint.

    ### JSONP
    If you're writing an AJAX application, and you'd like to wrap our response
    with a callback, all you have to do is specify a callback parameter with
    any API call:
    ```
    https://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction
    ```
    Would respond with:
    ```js
    callbackFunction({
        ...
    });
    ```
  version: v1
  x-identifier: InstagramApi
  x-codegen: 'DO NOT EDIT: generated by fsdgenfsd'
host: api.instagram.com
basePath: /v1
schemes:
- https
paths:
  /users/{userId}:
    get:
      description: Get basic information about a user.
      operationId: getUsersUserId
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: The user identifier number
        required: true
        type: number
        format: double
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersUserIdResponse'
  /users/self/feed:
    get:
      description: See the authenticated user's feed.
      operationId: getUsersSelfFeed
      produces:
      - application/json
      parameters:
      - in: query
        name: count
        description: Count of media to return.
        type: integer
        format: int32
      - in: query
        name: max_id
        description: Return media earlier than this max_id.s
        type: integer
        format: int32
      - in: query
        name: min_id
        description: Return media later than this min_id.
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersSelfFeedResponse'
  /users/{userId}/media/recent:
    get:
      operationId: getUsersUserIdMediaRecent
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: The user identifier number
        required: true
        type: number
        format: double
      - in: query
        name: count
        description: Count of media to return.
        type: integer
        format: int32
      - in: query
        name: max_timestamp
        description: Return media before this UNIX timestamp.
        type: integer
        format: int32
      - in: query
        name: min_timestamp
        description: Return media after this UNIX timestamp.
        type: integer
        format: int32
      - in: query
        name: min_id
        description: Return media later than this min_id.
        type: string
      - in: query
        name: max_id
        description: Return media earlier than this max_id.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersUserIdMediaRecentResponse'
  /users/self/media/liked:
    get:
      description: |-
        See the list of media liked by the authenticated user.
        Private media is returned as long as the authenticated user
        has permissionto view that media. Liked media lists are only
        available for the currently authenticated user.
      operationId: getUsersSelfMediaLiked
      produces:
      - application/json
      parameters:
      - in: query
        name: count
        description: Count of media to return.
        type: integer
        format: int32
      - in: query
        name: max_like_id
        description: Return media liked before this id.
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersSelfMediaLikedResponse'
  /users/search:
    get:
      description: Search for a user by name.
      operationId: getUsersSearch
      produces:
      - application/json
      parameters:
      - in: query
        name: q
        description: A query string
        type: string
      - in: query
        name: count
        description: Number of users to return.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersSearchResponse'
  /users/{userId}/follows:
    get:
      description: Get the list of users this user follows.
      operationId: getUsersUserIdFollows
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: The user identifier number
        required: true
        type: number
        format: double
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersUserIdFollowsResponse'
  /users/{userId}/followed-by:
    get:
      description: Get the list of users this user is followed by.
      operationId: getUsersUserIdFollowedBy
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: The user identifier number
        required: true
        type: number
        format: double
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersUserIdFollowedByResponse'
  /users/self/requested-by:
    get:
      description: List the users who have requested this user's permission to follow.
      operationId: getUsersSelfRequestedBy
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetUsersSelfRequestedByResponse'
  /users/{userId}/relationship:
    post:
      description: Modify the relationship between the current user and thetarget user.
      operationId: postUsersUserIdRelationship
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        description: The user identifier number
        required: true
        type: number
        format: double
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PostUsersUserIdRelationshipResponse'
  /media/{mediaId}:
    get:
      description: |-
        Get information about a media object.
        The returned type key will allow you to differentiate between `image`
        and `video` media.

        Note: if you authenticate with an OAuth Token, you will receive the
        `user_has_liked` key which quickly tells you whether the current user
        has liked this media item.
      operationId: getMediaMediaId
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: The media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Media'
          x-identifier: media
  /media1/{shortcode}:
    get:
      description: |-
        This endpoint returns the same response as **GET** `/media/media-id`.

        A media object's shortcode can be found in its shortlink URL.
        An example shortlink is `http://instagram.com/p/D/`
        Its corresponding shortcode is D.
      operationId: getMedia1Shortcode
      produces:
      - application/json
      parameters:
      - in: path
        name: shortcode
        description: The media shortcode
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Media'
          x-identifier: media
  /media/search:
    get:
      description: |-
        Search for media in a given area. The default time span is set to 5
        days. The time span must not exceed 7 days. Defaults time stamps cover
        the last 5 days. Can return mix of image and video types.
      operationId: getMediaSearch
      produces:
      - application/json
      parameters:
      - in: query
        name: LAT
        description: Latitude of the center search coordinate. If used, lng is required.
        type: number
        format: double
      - in: query
        name: MIN_TIMESTAMP
        description: A unix timestamp. All media returned will be taken later than this timestamp.
        type: integer
        format: int32
      - in: query
        name: LNG
        description: Longitude of the center search coordinate. If used, lat is required.
        type: number
        format: double
      - in: query
        name: MAX_TIMESTAMP
        description: A unix timestamp. All media returned will be taken earlier than this timestamp.
        type: integer
        format: int32
      - in: query
        name: DISTANCE
        description: Default is 1km (distance=1000), max distance is 5km.
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetMediaSearchResponse'
  /media/popular:
    get:
      description: |-
        Get a list of what media is most popular at the moment.
        Can return mix of image and video types.
      operationId: getMediaPopular
      produces:
      - application/json
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetMediaPopularResponse'
  /media/{mediaId}/comments:
    get:
      description: Get a list of recent comments on a media object.
      operationId: getMediaMediaIdComments
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetMediaMediaIdCommentsResponse'
    post:
      description: |-
        Create a comment on a media object with the following rules:

        * The total length of the comment cannot exceed 300 characters.
        * The comment cannot contain more than 4 hashtags.
        * The comment cannot contain more than 1 URL.
        * The comment cannot consist of all capital letters.
      operationId: postMediaMediaIdComments
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PostMediaMediaIdCommentsResponse'
    delete:
      description: |-
        Remove a comment either on the authenticated user's media object or
        authored by the authenticated user.
      operationId: deleteMediaMediaIdComments
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DeleteMediaMediaIdCommentsResponse'
  /media/{mediaId}/likes:
    get:
      description: Get a list of users who have liked this media.
      operationId: getMediaMediaIdLikes
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetMediaMediaIdLikesResponse'
    post:
      description: Set a like on this media by the currently authenticated user.
      operationId: postMediaMediaIdLikes
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PostMediaMediaIdLikesResponse'
    delete:
      description: Remove a like on this media by the currently authenticated user.
      operationId: deleteMediaMediaIdLikes
      produces:
      - application/json
      parameters:
      - in: path
        name: mediaId
        description: Media ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DeleteMediaMediaIdLikesResponse'
  /tags/{tagName}:
    get:
      description: Get information about a tag object.
      operationId: getTagsTagName
      produces:
      - application/json
      parameters:
      - in: path
        name: tagName
        description: Tag name
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Tag'
          x-identifier: tag
  /tags/{tagName}/media/recent:
    get:
      description: |-
        Get a list of recently tagged media. Use the `max_tag_id` and
        `min_tag_id` parameters in the pagination response to paginate through
        these objects.
      operationId: getTagsTagNameMediaRecent
      produces:
      - application/json
      parameters:
      - in: path
        name: tagName
        description: Tag name
        required: true
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetTagsTagNameMediaRecentResponse'
  /tags/search:
    get:
      operationId: getTagsSearch
      produces:
      - application/json
      parameters:
      - in: query
        name: q
        description: 'A valid tag name without a leading #. (eg. snowy, nofilter)'
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetTagsSearchResponse'
  /locations/{locationId}:
    get:
      description: Get information about a location.
      operationId: getLocationsLocationId
      produces:
      - application/json
      parameters:
      - in: path
        name: locationId
        description: Location ID
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetLocationsLocationIdResponse'
  /locations/{locationId}/media/recent:
    get:
      description: Get a list of recent media objects from a given location.
      operationId: getLocationsLocationIdMediaRecent
      produces:
      - application/json
      parameters:
      - in: path
        name: locationId
        description: Location ID
        required: true
        type: integer
        format: int32
      - in: query
        name: max_timestamp
        description: Return media before this UNIX timestamp.
        type: integer
        format: int32
      - in: query
        name: min_timestamp
        description: Return media after this UNIX timestamp.
        type: integer
        format: int32
      - in: query
        name: min_id
        description: Return media later than this min_id.
        type: string
      - in: query
        name: max_id
        description: Return media earlier than this max_id.
        type: string
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetLocationsLocationIdMediaRecentResponse'
  /locations/search:
    get:
      description: Search for a location by geographic coordinate.
      operationId: getLocationsSearch
      produces:
      - application/json
      parameters:
      - in: query
        name: distance
        description: Default is 1000m (distance=1000), max distance is 5000.
        type: integer
        format: int32
      - in: query
        name: facebook_places_id
        description: Returns a location mapped off of a Facebook places id. If used, a Foursquare id and lat, lng are not required.
        type: integer
        format: int32
      - in: query
        name: foursquare_id
        description: returns a location mapped off of a foursquare v1 api location id. If used, you are not required to use lat and lng. Note that this method is deprecated; you should use the new foursquare IDs with V2 of their API.
        type: integer
        format: int32
      - in: query
        name: lat
        description: atitude of the center search coordinate. If used, lng is required.
        type: number
        format: double
      - in: query
        name: lng
        description: ongitude of the center search coordinate. If used, lat is required.
        type: number
        format: double
      - in: query
        name: foursquare_v2_id
        description: Returns a location mapped off of a foursquare v2 api location id. If used, you are not required to use lat and lng.
        type: integer
        format: int32
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetLocationsSearchResponse'
  /geographies/{geoId}/media/recent:
    get:
      description: |-
        Get recent media from a geography subscription that you created.
        **Note**: You can only access Geographies that were explicitly created
        by your OAuth client. Check the Geography Subscriptions section of the
        [real-time updates page](https://instagram.com/developer/realtime/).
        When you create a subscription to some geography
        that you define, you will be returned a unique geo-id that can be used
        in this query. To backfill photos from the location covered by this
        geography, use the [media search endpoint
        ](https://instagram.com/developer/endpoints/media/).
      operationId: getGeographiesGeoIdMediaRecent
      parameters:
      - in: path
        name: geoId
        description: Geolocation ID
        required: true
        type: integer
        format: int32
      - in: query
        name: count
        description: Max number of media to return.
        type: integer
        format: int32
      - in: query
        name: min_id
        description: Return media before this `min_id`.
        type: integer
        format: int32
      responses:
        '200':
          description: ''
definitions:
  GetUsersUserIdResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/User'
  GetUsersSelfFeedResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Media'
  GetUsersUserIdMediaRecentResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Media'
  GetUsersSelfMediaLikedResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Media'
  GetUsersSearchResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
  GetUsersUserIdFollowsResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
  GetUsersUserIdFollowedByResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
  GetUsersSelfRequestedByResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
  PostUsersUserIdRelationshipResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
  Media:
    type: object
    properties:
      created_time:
        description: Epoc time (ms)
        type: integer
        format: int32
      type:
        type: string
      filter:
        type: string
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
      id:
        type: integer
        format: int32
      user:
        $ref: '#/definitions/MiniProfile'
      users_in_photo:
        type: array
        items:
          $ref: '#/definitions/MiniProfile'
      location:
        $ref: '#/definitions/Location'
      comments:
        type: object
      likes:
        type: object
      images:
        type: object
      videos:
        type: object
  GetMediaSearchResponse:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
  GetMediaPopularResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Media'
  GetMediaMediaIdCommentsResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: array
        items:
          $ref: '#/definitions/Comment'
  PostMediaMediaIdCommentsResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: object
  DeleteMediaMediaIdCommentsResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: object
  GetMediaMediaIdLikesResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: array
        items:
          $ref: '#/definitions/Like'
  PostMediaMediaIdLikesResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: object
  DeleteMediaMediaIdLikesResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: object
  Tag:
    type: object
    properties:
      media_count:
        type: integer
        format: int32
      name:
        type: string
  GetTagsTagNameMediaRecentResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Tag'
  GetTagsSearchResponse:
    type: object
    properties:
      meta:
        type: object
      data:
        type: array
        items:
          $ref: '#/definitions/Tag'
  GetLocationsLocationIdResponse:
    type: object
    properties:
      data:
        $ref: '#/definitions/Location'
  GetLocationsLocationIdMediaRecentResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Media'
  GetLocationsSearchResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Location'
  User:
    type: object
    properties:
      id:
        type: integer
        format: int32
      username:
        type: string
      full_name:
        type: string
      profile_picture:
        type: string
      bio:
        type: string
      website:
        type: string
      counts:
        type: object
  MiniProfile:
    description: A shorter version of User for likes array
    type: object
    properties:
      user_name:
        type: string
      full_name:
        type: string
      id:
        type: integer
        format: int32
      profile_picture:
        type: string
  Location:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      latitude:
        type: number
        format: double
      longitude:
        type: number
        format: double
  Comment:
    type: object
    properties:
      id:
        type: string
      created_time:
        type: string
      text:
        type: string
      from:
        $ref: '#/definitions/MiniProfile'
  Like:
    type: object
    properties:
      user_name:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      type:
        type: string
      id:
        type: string
